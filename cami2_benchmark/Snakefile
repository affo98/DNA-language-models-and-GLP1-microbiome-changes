""" """
import os
import yaml
import glob

#dirs
OUTDIR_RAW = os.path.join(os.getcwd(), "cami2_benchmark", "raw_data")
OUTDIR_PROCESSED = os.path.join(os.getcwd(), "cami2_benchmark", "processed_data")
OUTDIR_MODEL_RESULTS = os.path.join(os.getcwd(), "cami2_benchmark", "model_results")
OUTDIR_CLUSTERS = os.path.join(os.getcwd(), "cami2_benchmark", 'clusters')
SRC_DIR = os.path.join(os.getcwd(), "cami2_benchmark", "src")
BASE = os.path.join(os.getcwd(), "cami2_benchmark")
LOGS = os.path.join(os.getcwd(), "cami2_benchmark", "logs")

#DATASET, sample and model config
with open(os.path.join(BASE, "config.yml"), "r") as f:
    datasets_model_config = yaml.safe_load(f)

ALL_DATASETS = [d["name"] for d in datasets_model_config["datasets"]]
DATASET = config.get("DATASET", None)
assert DATASET in ALL_DATASETS, f"Error: Selected dataset '{DATASET}' is not in the available DATASET: {ALL_DATASETS}"

SAMPLES = {d["name"]: d.get("samples", []) for d in datasets_model_config["datasets"]}
sample_str = ' '.join(SAMPLES.get(DATASET, []))

ALL_MODELS  = [d["name"] for d in datasets_model_config["models"]]
MODEL = config.get("MODEL", None)
assert MODEL==None or MODEL in ALL_MODELS, f"Error: Selected model '{MODEL}' is not in the available DATASET: {ALL_MODELS}"



#processing flow of snakemake 
config_download = bool(config.get("DOWNLOAD", False))
config_concatenate = bool(config.get("CONCATENATE", False))
config_alignment = bool(config.get("ALIGNMENT", False))
config_checkm2 = bool(config.get("CHECKM2", False))

MINSIZE_BINS=250000


print(f"-------------Configuration Flags:--------------")
print(f"  - DATASET:             {DATASET}")
print(f"  - Selected Model:      {MODEL}")
print(f"  - Download:            {config_download}")
print(f"  - Concatenate:         {config_concatenate}")
print(f"  - Alignment:           {config_alignment}")
print(f"  - CheckM2:             {config_checkm2}")
print(f"  - MinSize Bins:        {MINSIZE_BINS}")



input_files = []
if config_download:
    input_files += expand(
        os.path.join(OUTDIR_RAW, DATASET, "{sample}_contigs.fasta"),
        sample=SAMPLES.get(DATASET, [])
    )
    input_files += expand(
        os.path.join(OUTDIR_RAW, DATASET, "{sample}_reads.fq.gz"),
        sample=SAMPLES.get(DATASET, [])
    )

if config_concatenate:
    input_files.append(
        os.path.join(OUTDIR_PROCESSED, DATASET, "catalogue.fna.gz")
    )

if config_alignment:
    input_files += expand(
        os.path.join(OUTDIR_PROCESSED, DATASET, "{sample}_sorted.bam"),
        sample=SAMPLES.get(DATASET, [])
    )

if MODEL=='vamb':
    input_files += [
        os.path.join(OUTDIR_MODEL_RESULTS, DATASET, "vamb_output"),
        os.path.join(OUTDIR_MODEL_RESULTS, DATASET, "vamb_postprocess"),
        os.path.join(OUTDIR_MODEL_RESULTS, DATASET, "fasta_bins", "vamb"),
    ]

elif MODEL=='taxvamb':
    input_files += [
        os.path.join(OUTDIR_MODEL_RESULTS, DATASET, "metabuli", "metabuli_results"),
        os.path.join(OUTDIR_MODEL_RESULTS, DATASET, "taxconverter", "result.tsv"),
        os.path.join(OUTDIR_MODEL_RESULTS, DATASET, "taxvamb_output"),
        os.path.join(OUTDIR_MODEL_RESULTS, DATASET, "taxvamb_postprocess"),
        os.path.join(OUTDIR_MODEL_RESULTS, DATASET, "fasta_bins", "taxvamb"),
    ]

elif MODEL == 'comebin':
    input_files += [
        os.path.join(OUTDIR_MODEL_RESULTS, DATASET, "comebin_output"),
        os.path.join(OUTDIR_MODEL_RESULTS, DATASET, "fasta_bins", "comebin"),
    ]

if config_checkm2:
    input_files += expand(
        os.path.join(OUTDIR_MODEL_RESULTS, DATASET, "checkm2", "{model}_results"),
        model=MODEL
    )


rule all:
    input: input_files

        
        


rule download:
    output:
        contigs=expand(os.path.join(OUTDIR_RAW, DATASET, "{sample}_contigs.fasta"), sample=SAMPLES.get(DATASET, [])),
        reads=expand(os.path.join(OUTDIR_RAW, DATASET, "{sample}_reads.fq.gz"), sample=SAMPLES.get(DATASET, []))
    conda:
        "envs/cami2_processing.yml"
    shell:
        """
        python {SRC_DIR}/get_cami2_data.py {DATASET} {sample_str}
        """


rule concatenate:
    input:
        expand(os.path.join(OUTDIR_RAW, DATASET, "{sample}_contigs.fasta"), sample=SAMPLES.get(DATASET, []))
    output:
        os.path.join(OUTDIR_PROCESSED, DATASET, "catalogue.fna.gz")
    log:
        os.path.join(LOGS, DATASET, "concatenate.log")
    params:
        min_length=2000
    conda:
        "envs/vamb.yml"
    shell:
        """
        python {SRC_DIR}/concatenate.py {output} {input} -m {params.min_length}
        python {SRC_DIR]/concatenate_log.py {input} {output} - {params.min_length} --log {log}
        """


rule alignment:
    input:
        read=os.path.join(OUTDIR_RAW, DATASET, "{sample}_reads.fq.gz"),
        catalogue=os.path.join(OUTDIR_PROCESSED, DATASET, "catalogue.fna.gz")
    output:
        os.path.join(OUTDIR_PROCESSED, DATASET, "{sample}_sorted.bam")
    threads:
        96
    conda:
        "envs/cami2_processing.yml"
    shell:
        """
        strobealign -t {threads} {input.catalogue} {input.read} | samtools sort -o {output}
        """



#VAMB
rule vamb:
    input:
        catalogue=os.path.join(OUTDIR_PROCESSED, DATASET, "catalogue.fna.gz"),
        bams=expand(os.path.join(OUTDIR_PROCESSED, DATASET, "{sample}_sorted.bam"), sample=SAMPLES.get(DATASET, []))
    output:
        os.path.join(OUTDIR_MODEL_RESULTS, DATASET, "vamb_output")
    conda:
        "envs/cami2_processing.yml"
    shell:
        """
        vamb bin default --outdir {output} --fasta {input.catalogue} --bamfiles {input.bams}
        """

rule move_cluster_outputs_vamb:
    input:
        model_outputs=os.path.join(OUTDIR_MODEL_RESULTS, DATASET, "vamb_output")
    output:
        cluster_results=directory(os.path.join(OUTDIR_MODEL_RESULTS, DATASET, "vamb_postprocess"))
    conda:
        "envs/cami2_processing.yml"
    shell:
        """
        python {SRC_DIR}/move_cluster_outputs_vamb.py {output.cluster_results} {input.model_outputs}
        """

rule create_fasta_bins_vamb:
    input:
        catalogue=os.path.join(OUTDIR_PROCESSED, DATASET, "catalogue.fna.gz"),
        cluster_results=os.path.join(OUTDIR_MODEL_RESULTS, DATASET, "vamb_postprocess")
    output:
        dirs=directory(os.path.join(OUTDIR_MODEL_RESULTS, DATASET, "fasta_bins", "{MODEL}"))
    log:
        log_file=os.path.join(LOGS, DATASET, "{MODEL}_bin_postprocessing.log")
    params:
        minsize_bins = MINSIZE_BINS
    conda: 
        "envs/vamb.yml"
    shell:
        """
        python {SRC_DIR}/create_fasta.py {input.catalogue} {input.cluster_results}/vamb_output_clusters.tsv {params.minsize_bins} {output.dirs}
        --log {log.log_file}
        """
#END VAMB


#TAXVAMB
rule metabuli:
    input:
        catalogue=os.path.join(OUTDIR_PROCESSED, DATASET, "catalogue.fna.gz")
    output:
        database = os.path.join(OUTDIR_MODEL_RESULTS, DATASET, "metabuli", "gtdb_database"),  
        database_tmp = os.path.join(OUTDIR_MODEL_RESULTS, DATASET, "metabuli", "gtdb_database_tmp"), 
        results = os.path.join(OUTDIR_MODEL_RESULTS, DATASET, "metabuli", "metabuli_results")   
    params:
        seq_mode=1,
        job_id=100

    shell:
        """
        if [ ! -d "metabuli" ]; then
            wget https://mmseqs.com/metabuli/metabuli-linux-avx2.tar.gz
            tar xvzf metabuli-linux-avx2.tar.gz
            export PATH=$(pwd)/metabuli/bin/:$PATH
        fi

        if [ ! -d "{output.database}/gtdb" ]; then
            metabuli databases GTDB {output.database} {output.database_tmp}
        fi

        metabuli classify --seq-mode {params.seq_mode} {input.catalogue} {output.database}/gtdb {output.results} {params.job_id}
        """

rule taxconverter:
    input:
        input_dir = os.path.join(OUTDIR_MODEL_RESULTS, DATASET, "metabuli", "metabuli_results")
    output:
        result = os.path.join(OUTDIR_MODEL_RESULTS, DATASET, "taxconverter", "result.tsv")
    conda:
        "envs/taxconverter.yml"
    params:
        lineage_zip="https://github.com/RasmussenLab/taxconverter/raw/7f5ff980612dc59d3290b5ddfe97eb814e96c42f/data/lineage.zip",
        lineage_dir="taxconverter/data"
    shell:
        """
        if [ ! -d "taxconverter" ]; then
            git clone git@github.com:RasmussenLab/taxconverter.git
            cd taxconverter
            pip install -e .
        fi

        if [ ! -f "{params.lineage_dir}/ncbi_lineage.csv" ] || [ ! -f "{params.lineage_dir}/metabuli_lineage.csv" ]; then
            curl -L -o {params.lineage_dir}/lineage.zip "{params.lineage_zip}"
            unzip -o {params.lineage_dir}/lineage.zip -d {params.lineage_dir}
        fi

        taxconverter metabuli -c {input.input_dir}/100_classifications.tsv -r {input.input_dir}/100_report.tsv -o {output.result}
        """


rule taxvamb:
    input:
        catalogue=os.path.join(OUTDIR_PROCESSED, DATASET, "catalogue.fna.gz"),
        bams=expand(os.path.join(OUTDIR_PROCESSED, DATASET, "{sample}_sorted.bam"), sample=SAMPLES.get(DATASET, [])),
        taxonomy=os.path.join(OUTDIR_MODEL_RESULTS, DATASET, "taxconverter", "result.tsv")
    output:
        os.path.join(OUTDIR_MODEL_RESULTS, DATASET, "taxvamb_output")
    conda:
        "envs/cami2_processing.yml"
    shell:
        """
        vamb bin taxvamb --outdir {output} --fasta {input.catalogue} --bamfiles {input.bams} --taxonomy {input.taxonomy}
        """


rule move_cluster_outputs_taxvamb:
    input:
        model_outputs=os.path.join(OUTDIR_MODEL_RESULTS, DATASET, "taxvamb_output")
    output:
        cluster_results=directory(os.path.join(OUTDIR_MODEL_RESULTS, DATASET, "taxvamb_postprocess"))
    conda:
        "envs/cami2_processing.yml"
    shell:
        """
        python {SRC_DIR}/move_cluster_outputs_vamb.py {output.cluster_results} {input.model_outputs}
        """

rule create_fasta_bins_taxvamb:
    input:
        catalogue=os.path.join(OUTDIR_PROCESSED, DATASET, "catalogue.fna.gz"),
        cluster_results=os.path.join(OUTDIR_MODEL_RESULTS, DATASET, "taxvamb_postprocess")
    output:
        dirs=directory(os.path.join(OUTDIR_MODEL_RESULTS, DATASET, "fasta_bins", "{MODEL}"))
    log:
        os.path.join(LOGS, DATASET, "{MODEL}_bin_postprocessing.log")
    params:
        minsize_bins = MINSIZE_BINS
    conda: 
        "envs/vamb.yml"
    shell:
        """
        python {SRC_DIR}/create_fasta.py {input.catalogue} {input.cluster_results}/vamb_output_clusters.tsv {params.minsize_bins} {output.dirs}
        --log {log}
        """
#END TAXVAMB


#COMEBIN
rule comebin:
    input:
        catalogue=expand(os.path.join(OUTDIR_PROCESSED, DATASET, "catalogue.fna.gz")),
        bams=expand(os.path.join(OUTDIR_PROCESSED, DATASET, "{sample}_sorted.bam"), sample=SAMPLES.get(DATASET, []))
    output:
        os.path.join(OUTDIR_MODEL_RESULTS, DATASET, "comebin_output")
    params:
        views=6,
        threads=48
    conda:
        "envs/comebin.yml"
    shell:
        """
        bash run_comebin.sh -a {input.catalogue} -p {input.bams} -o {output} -n {params.views} -t {params.threads}
        """

rule postprocess_cluster_outputs_comebin:
    input:
        model_outputs=os.path.join(OUTDIR_MODEL_RESULTS, DATASET, "comebin_output")
    output:
        cluster_fasta=directory(os.path.join(OUTDIR_MODEL_RESULTS, DATASET, "fasta_bins", "{MODEL}"))
    log:
        os.path.join(LOGS, DATASET, "{MODEL}_bin_postprocessing.log")
    params:
        minsize_bins = 250000
    conda:
        "envs/cami2_processing.yml"
    shell:
        """
        python {SRC_DIR}/postprocess_cluster_outputs_comebin.py {output.cluster_fasta} {input.model_outputs}/comebin_res/comebin_res_bins {params.minsize_bins} --log {log}
        """
#END COMEBIN




rule checkm2:
    input:
        fasta_bins=expand(os.path.join(OUTDIR_MODEL_RESULTS, DATASET, "fasta_bins", "{model}"), model=MODEL)
    output:
        output=directory(expand(os.path.join(OUTDIR_MODEL_RESULTS, DATASET, "checkm2", "{model}_results"), model=MODEL))
    conda:
        "envs/checkm2.yml"
    threads:
        128
    shell:
        """
        checkm2 predict --threads {threads} --input {input.fasta_bins} --output-directory {output.output}
        """







# rule semibin:
#     input:
#         catalogue=expand(os.path.join(OUTDIR_PROCESSED, DATASET, "catalogue.fna.gz")),
#         bams=expand(os.path.join(OUTDIR_PROCESSED, DATASET, "{sample}_sorted.bam"), sample=SAMPLES.get(DATASET, []))
#     output:
#         os.path.join(OUTDIR_MODEL_RESULTS, DATASET, "semibin_output")
#     conda:
#         "envs/semibin_environment.yml"
#     shell:
#         """
        
#         """







# rule concatenate_process_semibin:
#     input:
#         os.path.join(OUTDIR, DATASET, "catalogue.fna.gz")
#     output:
#         os.path.join(OUTDIR, DATASET, "semibin/catalogue_semibin.fna")
#     conda:
#         "envs/cami2_environment.yml"
#     shell:
#         """
#         zcat {input} | sed -E 's/([0-9]+)([A-Za-z])/\\1:\\2/' > {output} 
#         """


# rule bam_process_semibin:
#     input:
#         bam=os.path.join(OUTDIR, DATASET, "{sample}_sorted.bam")
#     output:
#         modified_bam=os.path.join(OUTDIR, DATASET, "semibin/{sample}_sorted_semibin.bam")
#     conda:
#         "envs/cami2_environment.yml"
#     shell:
#         """
#         samtools view -H {input.bam} | \\
#         sed -E 's/([0-9]+)([A-Za-z0-9]+)/\\1:\\2/' | \\
#         samtools reheader - {input.bam} > {output.modified_bam}
#         """

#rule_all
    #input:
        #os.path.join(OUTDIR, DATASET, "semibin/catalogue_semibin.fna")
        #expand(os.path.join(OUTDIR, DATASET, "semibin/{sample}_sorted_semibin.bam"), sample=[sample for sample in SAMPLES.get(DATASET, [])])





    

