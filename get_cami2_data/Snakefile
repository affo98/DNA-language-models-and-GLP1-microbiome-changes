import os
import yaml
import glob

OUTDIR_TMP = os.path.join(os.getcwd(), "get_cami2_data", "data")
OUTDIR = os.path.join(os.getcwd(), "data", "cami2")
CONFIG = os.path.join(os.getcwd(), "config")

with open(os.path.join(CONFIG, "cami2_datasets.yml"), "r") as f:
    datasets_config = yaml.safe_load(f)

ALL_DATASETS = [d["name"] for d in datasets_config["datasets"]]
DATASET = config.get("DATASET", "all")
DATASETS = ALL_DATASETS if DATASET == "all" else [DATASET]


DATASET = config.get("DATASET", "all")
DATASETS = [d["name"] for d in datasets_config["datasets"]]
DATASETS = DATASETS if DATASET == "all" else [DATASET]
SAMPLES = {d["name"]: d.get("samples", []) for d in datasets_config["datasets"]}
    

rule all:
    input:
        # Expand for contigs and reads across all datasets and samples
        expand(os.path.join(OUTDIR_TMP, "{dataset}", "{sample}_contigs.fasta"), dataset=DATASETS, sample=[sample for dataset in DATASETS for sample in SAMPLES.get(dataset, [])]),
        expand(os.path.join(OUTDIR_TMP, "{dataset}", "{sample}_reads.fq.gz"), dataset=DATASETS, sample=[sample for dataset in DATASETS for sample in SAMPLES.get(dataset, [])])

# Define the 'download' rule within the loop, with a dynamic rule name
for dataset in DATASETS:
    sample_str = ' '.join(SAMPLES.get(dataset, []))

    rule_name = f"download_{dataset}"  # Generate a unique rule name for each dataset
    
    rule download:
        output:
            # Output contigs and reads for each dataset and sample
            contigs=expand(os.path.join(OUTDIR_TMP, dataset, "{sample}_contigs.fasta"), sample=SAMPLES.get(dataset, [])),
            reads=expand(os.path.join(OUTDIR_TMP, dataset, "{sample}_reads.fq.gz"), sample=SAMPLES.get(dataset, []))
        conda:
            "cami2_environment.yml"
        shell:
            """
            python get_cami2_data/get_cami2_data.py {dataset} {sample_str}
            """


    # rule concatenate:
    #     input:
    #         expand(os.path.join(OUTDIR_TMP, dataset, "{sample}_contigs.fasta"), sample=SAMPLES.get(dataset, []))
    #     output:
    #         os.path.join(OUTDIR, dataset, "catalogue.fna.gz")
    #     conda:
    #         "cami2_environment.yml"
    #     shell:
    #         """
    #         python src/concatenate.py {output} {input}
    #         """


    # rule alignment:
    #     input:
    #         read=os.path.join(OUTDIR_TMP, dataset, "{sample}_reads.fq.gz"),
    #         catalogue=os.path.join(OUTDIR, dataset, "catalogue.fna.gz")
    #     output:
    #         os.path.join(OUTDIR, dataset, "{sample}_sorted.bam")
    #     threads:
    #         96
    #     conda:
    #         "cami2_environment.yml"
    #     shell:
    #         """
    #         strobealign -t {threads} {input.catalogue} {input.read} | samtools sort -o {output}
    #         """

    

