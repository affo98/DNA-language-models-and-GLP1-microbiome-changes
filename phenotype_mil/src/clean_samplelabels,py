import csv
import argparse
from typing import List, Tuple


def read_sample_labels(sample_labels_path: str) -> Tuple[List[str], List[int]]:
    """
    Reads a tab-delimited sample labels file and returns lists of sample IDs (without 'SAMEA') and labels.

    :param sample_labels_path: Path to the sample labels TSV file.
    :return: Tuple of (sample_ids, labels).
    """
    sample_ids = []
    labels = []

    with open(sample_labels_path, "r") as file:
        reader = csv.reader(file, delimiter="\t")
        # Skip header if present
        first_row = next(reader, None)
        if first_row and not first_row[0].isdigit():
            # assume header, skip
            pass
        else:
            # first row is data
            sample_ids.append(first_row[0].replace("SAMEA", ""))
            labels.append(int(first_row[1]))

        for row in reader:
            sample_ids.append(row[0].replace("SAMEA", ""))
            labels.append(int(row[1]))

    return sample_ids, labels


def write_sample_labels(
    output_path: str, sample_ids: List[str], labels: List[int]
) -> None:
    """
    Writes cleaned sample IDs and labels to a TSV output file.

    :param output_path: Path to the output TSV file.
    :param sample_ids: List of cleaned sample IDs.
    :param labels: Corresponding list of labels.
    """
    with open(output_path, "w") as out_file:
        writer = csv.writer(out_file, delimiter="\t")
        writer.writerow(["sample_id", "label"])
        for sid, lab in zip(sample_ids, labels):
            writer.writerow([sid, lab])


def main():
    parser = argparse.ArgumentParser(
        description="Read sample labels, strip 'SAMEA' prefix, and write cleaned file."
    )
    parser.add_argument(
        "labels_file", type=str, help="Path to the sample labels TSV file."
    )
    parser.add_argument(
        "output_file",
        type=str,
        help="Path where the cleaned labels TSV will be written.",
    )
    args = parser.parse_args()

    sample_ids, labels = read_sample_labels(args.labels_file)
    write_sample_labels(args.output_file, sample_ids, labels)
    print(f"Cleaned labels written to: {args.output_file}")


if __name__ == "__main__":
    main()
